#l structure of this file
# Set: https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html
input{
#quotation
	kafka{
		zk_connect => "kafkaip"
		group_id => "quotation_aop1"
		topic_id => "quotation_aop"
		type => "quotation_aop"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "quotation_print1"
		topic_id => "quotation_print"
		type => "quotation_print"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "quotation_interface1"
		topic_id => "quotation_interface"
		type => "quotation_interface"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "quotation_exception1"
		topic_id => "quotation_exception"
		type => "quotation_exception"
	}
#policy
	kafka{
		zk_connect => "kafkaip"
		group_id => "policy_aop1"
		topic_id => "policy_aop"
		type => "policy_aop"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "policy_print1"
		topic_id => "policy_print"
		type => "policy_print"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "policy_interface1"
		topic_id => "policy_interface"
		type => "policy_interface"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "policy_exception1"
		topic_id => "policy_exception"
		type => "policy_exception"
	}
#workbench
	kafka{
		zk_connect => "kafkaip"
		group_id => "workbench_aop1"
		topic_id => "workbench_aop"
		type => "workbench_aop"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "workbench_print1"
		topic_id => "workbench_print"
		type => "workbench_print"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "workbench_interface1"
		topic_id => "workbench_interface"
		type => "workbench_interface"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "workbench_exception1"
		topic_id => "workbench_exception"
		type => "workbench_exception"
	}
#product
	kafka{
		zk_connect => "kafkaip"
		group_id => "product_aop1"
		topic_id => "product_aop"
		type => "product_aop"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "product_print1"
		topic_id => "product_print"
		type => "product_print"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "product_interface1"
		topic_id => "product_interface"
		type => "product_interface"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "product_exception1"
		topic_id => "product_exception"
		type => "product_exception"
	}
#config
	kafka{
		zk_connect => "kafkaip"
		group_id => "config_aop1"
		topic_id => "config_aop"
		type => "config_aop"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "config_print1"
		topic_id => "config_print"
		type => "config_print"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "config_interface1"
		topic_id => "config_interface"
		type => "config_interface"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "config_exception1"
		topic_id => "config_exception"
		type => "config_exception"
	}
#gs
	kafka{
		zk_connect => "kafkaip"
		group_id => "gs_aop1"
		topic_id => "gs_aop"
		type => "gs_aop"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "gs_print1"
		topic_id => "gs_print"
		type => "gs_print"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "gs_interface1"
		topic_id => "gs_interface"
		type => "gs_interface"
	}
	kafka{
		zk_connect => "kafkaip"
		group_id => "gs_exception1"
		topic_id => "gs_exception"
		type => "gs_exception"
	}
#	stdin {
#		type => "exception"
#	}
}

filter {
	ruby {
		code => "
			topic=event['type'].split('_')
			event['type']=topic[1]
			event['sys']=topic[0]
		"
	}
  
#	if([type] =='kafkaipe'){
#	 	ruby{
#		  init => "@kname = ['value1','info1']"
#		  code => "event.append(Hash[@kname.zkafkaip( event['message'].split(' - '))])"
#			}
#			ruby{
#		  init => "@kname = ['level','outtime1','outtime2','class']"
#		  code => "event.append(Hash[@kname.zkafkaip( event['value1'].split(' '))])"
#			}
#			ruby{
#		  code => "event['outtime']=event['outtime1']+' '+event['outtime2']"
#			}
#			mutate{
#				gsub => [level,"\[",""]
#				gsub => [level,"\]",""]
#				remove_field => ["value1","outtime1","outtime2","info1"]
#			}
#		date {  
#		  match => [ "outtime", "YYYY-MM-dd HH:mm:ss,SSS" ]  
#		  target => "outtime"  
#		}
#		ruby {
#		  code => "event.timestamp.time.localtime"
#		}
#	}

	if([type]=='aop'){
		ruby{
			code => "
				message = event['message'][1,event['message'].length-2].split('] [')
				event['level']=message[0]
				event['outtime']=message[1]
				event['host']=message[2]
				event['localkafkaip']=message[3]
				event['remotekafkaip']=message[4]
				event['transactionId']=message[5]
				event['userId']=message[6]
				event['usercode']=message[7]
				event['url']=message[8]
				event['uuid1']=message[9]
				event['uuid2']=message[10]
#				event['url']=message[11]
				event['method']=message[12]
#				event['usercode']=message[13]
				event['counttime']=message[14]
				event['systag']=event['localkafkaip']
			"
		}
		mutate{
			convert => ["counttime","integer"]
		}
	}
	
	
	if([type]=='exception'){
		ruby{
			code => "
				message = event['message'][1,event['message'].length-2].split('] [')
				event['level']=message[0]
				event['outtime']=message[1]
				event['host']=message[2]
				event['localkafkaip']=message[3]
				event['remotekafkaip']=message[4]
				event['transactionId']=message[5]
				event['userId']=message[6]
				event['usercode']=message[7]
				event['url']=message[8]
				event['class']=message[9]
				event['info1']=message[10]
				event['systag']=event['localkafkaip']
			"
		}
	}
	
	if([type]=='print'){
		ruby{
			code => "
				message = event['message'][1,event['message'].length-2].split('] [')
				event['level']=message[0]
				event['outtime']=message[1]
				event['host']=message[2]
				event['localkafkaip']=message[3]
				event['remotekafkaip']=message[4]
				event['transactionId']=message[5]
				event['userId']=message[6]
				event['usercode']=message[7]
				event['url']=message[8]
				event['class']=message[9]
				event['info1']=message[10]
				event['systag']=event['localkafkaip']==':'?'127.0.0.1:8080':event['localkafkaip']
			"
		}
	}
	
	if([type]=='interface'){
		ruby{
			code => "
				message = event['message'][1,event['message'].length-2].split('] [')
				event['level']=message[0]
				event['outtime']=message[1]
				event['host']=message[2]
				event['localkafkaip']=message[3]
				event['remotekafkaip']=message[4]
				event['transactionId']=message[5]
				event['userId']=message[6]
				event['usercode']=message[7]
				event['url']=message[8]
				event['class']=message[9]
				event['info1']=message[10]
				event['systag']=event['localkafkaip']==':'?'127.0.0.1:8080':event['localkafkaip']
			"
		}
	}
	
	
	date {  
	  match => [ "outtime", "YYYY-MM-dd HH:mm:ss,SSS" ]  
	  target => "outtime"  
	}
	ruby {
		code => "event.timestamp.time.localtime"
	}
}

output {
#quotation
	if([sys]=='quotation'){
		if([type]=='aop'){
			elasticsearch {
				action => "index"
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "quotation_aop"
				timeout => 5000
			}
		} else {
			elasticsearch {
				action => "index"             
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "quotation_common"          
				timeout => 5000
			}
		}
	}
#policy	
	if([sys]=='policy'){
		if([type]=='aop'){
			elasticsearch {
				action => "index"
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "policy_aop"
				timeout => 5000
			}
		} else {
			elasticsearch {
				action => "index"             
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "policy_common"          
				timeout => 5000
			}
		}
	}
#workbench
	if([sys]=='workbench'){
		if([type]=='aop'){
			elasticsearch {
				action => "index"
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "workbench_aop"
				timeout => 5000
			}
		} else {
			elasticsearch {
				action => "index"             
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "workbench_common"          
				timeout => 5000
			}
		}
	}
#product
	if([sys]=='product'){
		if([type]=='aop'){
			elasticsearch {
				action => "index"
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "product_aop"
				timeout => 5000
			}
		} else {
			elasticsearch {
				action => "index"             
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "product_common"          
				timeout => 5000
			}
		}
	}
#config
	if([sys]=='config'){
		if([type]=='aop'){
			elasticsearch {
				action => "index"
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "config_aop"
				timeout => 5000
			}
		} else {
			elasticsearch {
				action => "index"             
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "config_common"          
				timeout => 5000
			}
		}
	}
#gs
	if([sys]=='gs'){
		if([type]=='aop'){
			elasticsearch {
				action => "index"
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "gs_aop"
				timeout => 5000
			}
		} else {
			elasticsearch {
				action => "index"             
				hosts  => ["9.23.28.28:9200","9.23.28.29:9200","9.23.28.9:9200"]
				index  => "gs_common"          
				timeout => 5000
			}
		}
	}
	if "_jsonparsefailure" in [tags] {
    stdout{
      codec => rubydebug
    }
  }
	
#	stdout {
#		codec => "json_lines"
#	}
}
